#!/bin/bash

set -e

NAMESPACE=${NAMESPACE:-default}
CLUSTER=<%= CLUSTER %>

if [ ! -f ./kubectl ]; then
   curl https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl -o kubectl && chmod +x ./kubectl
fi

if [ ! -f ./kubeconfig ]; then
    aws --region=$REGION s3 cp s3://<%= AWS_KUBECONFIG %> kubeconfig
fi

if [ "$NAMESPACE" != "default" ]; then
    sed -i.bak s/NAMESPACE/$NAMESPACE/g deploy/namespace.json
    KUBECONFIG=kubeconfig ./kubectl apply -f deploy/namespace.json

    for f in deploy/kubernetes/*.yml
    do
        KUBECONFIG=kubeconfig ./kubectl --namespace=$NAMESPACE apply -f $f
    done
fi

# set secrets
python3 deploy/envkubesecret.py $ENV > secret.json
KUBECONFIG=kubeconfig ./kubectl --namespace=$NAMESPACE apply -f ./secret.json

# Update app Image
<%- apps.each do |app| -%>
KUBECONFIG=kubeconfig ./kubectl --namespace=$NAMESPACE set image deployment/<%= kube_name(app) %> <%= kube_name(app) %>=${ECR}/<%= tag_name(app) %>:${CIRCLE_SHA1}
<%- end %>

export CLUSTER=$(KUBECONFIG=kubeconfig ./kubectl --namespace=$NAMESPACE config get-contexts | grep "*" | awk '{print $3}')
